scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_CompImport*/
        import { AbstractControl, ValidatorFn } from ''@angular/forms'';
        
        export default class Validation {
          static match(controlName: string, checkControlName: string): ValidatorFn {
            return (controls: AbstractControl) => {
              const control = controls.get(controlName);
              const checkControl = controls.get(checkControlName);
        
              if (checkControl?.errors && !checkControl.errors[''matching'']) {
                return null;
              }
        
              if (control?.value !== checkControl?.value) {
                controls.get(checkControlName)?.setErrors({ matching: true });
                return { matching: true };
              } else {
                return null;
              }
            };
          }
        }
        /*End_c8o_CompImport*/
        /*Begin_c8o_CompDeclaration*/
        	/*End_c8o_CompDeclaration*/
        /*Begin_c8o_CompConstructor*/
        		this.local.showPass = false;
        		this.local.showPass2 = false;
        		/*End_c8o_CompConstructor*/
        /*Begin_c8o_CompInitialization*/		
        		/*End_c8o_CompInitialization*/
        /*Begin_c8o_CompFinalization*/
        		/*End_c8o_CompFinalization*/
        /*Begin_c8o_CompChanges*/
        		/*End_c8o_CompChanges*/
        /*Begin_c8o_CompDoCheck*/
        		/*End_c8o_CompDoCheck*/
        /*Begin_c8o_CompAfterContentInit*/
        		
        		/*End_c8o_CompAfterContentInit*/
        /*Begin_c8o_CompAfterContentChecked*/
        		/*End_c8o_CompAfterContentChecked*/
        /*Begin_c8o_CompAfterViewInit*/
        	    //set validator password match
        	    setTimeout(()=>{
        			this.formResetPassword.form.addValidators(Validation.match(''newPassword'', ''newPassword2''))
        		},0)
        	    
        		/*End_c8o_CompAfterViewInit*/
        /*Begin_c8o_CompAfterViewChecked*/
        		/*End_c8o_CompAfterViewChecked*/
        /*Begin_c8o_CompFunction*/
        	
        	
          public f(key){
        	  try{
        		  if(this.formResetPassword.form.get(key).errors){
        			  return Object.keys(this.formResetPassword.form.get(key).errors);
        		  }
        		  else{
        			  return [];
        		  }
        		  
        	  }
        	  catch(e){
        		  console.log("error", e)
        	  }
        	  
          }
          public f2(){
        	  try{
        		  if(this.formResetPassword.form.errors){
        			  return true;
        		  }
        		  else{
        			  return false;
        		  }
        		  return 
        	  }
        	  catch(e){
        		  console.log("error", e)
        	  }
        	  
          }
        	/*End_c8o_CompFunction*/
        '
↓Grid [ngx.components.UIDynamicElement-1725785310204]: 
  beanData: '{"ionBean":"Grid","Height":"plain:100%"}'
  tagName: ion-grid
  ↓GridRow [ngx.components.UIDynamicElement-1725785310207]: 
    beanData: '{"ionBean":"GridRow","FlexAlignement":"plain:ion-align-items-center"}'
    tagName: ion-row
    ↓GridCol1 [ngx.components.UIDynamicElement-1725785310210]: 
      beanData: '{"ionBean":"GridCol"}'
      tagName: ion-col
    ↓GridCol [ngx.components.UIDynamicElement-1725785310213]: 
      beanData: |
        '{
         "ionBean": "GridCol",
         "SizeLg": "plain:10",
         "SizeMd": "plain:11",
         "SizeSm": "plain:12",
         "SizeXl": "plain:6",
         "SizeXs": "plain:12"
        }'
      tagName: ion-col
      ↓CardContainer [ngx.components.UIDynamicElement-1725785310216]: 
        beanData: '{"ionBean":"Card"}'
        tagName: ion-card
        ↓CardHeader [ngx.components.UIDynamicElement-1725785310219]: 
          beanData: '{"ionBean":"CardHeader"}'
          tagName: ion-card-header
          ↓Div [ngx.components.UIDynamicElement-1725785310222]: 
            beanData: '{"ionBean":"DivTag"}'
            tagName: div
            ↓Style [ngx.components.UIStyle-1725785310225]: 
              styleContent: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      '	display: flex;
                      	align-items: center;
                      '
            ↓LazyImage [ngx.components.UIDynamicElement-1725785310228]: 
              beanData: '{"ionBean":"LazyImage","Src":"source:{\"filter\":\"Asset\",\"project\":\"lib_UserManager\",\"input\":\"\",\"model\":{\"data\":[{\"asset\":\"''assets\\\/logo_convertigo_blue.svg''\"}],\"path\":\"\",\"prefix\":\"(this.imgUrl != undefined && this.imgUrl != '''') ? this.imgUrl : \",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}"}'
              tagName: ion-img
              ↓Style [ngx.components.UIStyle-1725785310231]: 
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        '	height:28px;
                        	width: 90px;
                        	margin-right: 15px;
                        '
            ↓H1 [ngx.components.UIDynamicElement-1725785310234]: 
              beanData: '{"ionBean":"Heading1"}'
              tagName: h1
              ↓Text [ngx.components.UIText-1725785310237]: 
                i18n: true
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Suppression du compte et des données associées
              ↓FontStyle [ngx.components.UIFontStyle-1725785310240]: 
                fontFamily: Open Sans
                fontStyle: normal
                fontWeight: 700
                ruleTargets: class1725785310234
                styleContent: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'font-family: "Open Sans";
                        font-style: normal;
                        font-weight: 700;
                        '
        ↓CardContent [ngx.components.UIDynamicElement-1725785310243]: 
          beanData: '{"ionBean":"CardContent"}'
          tagName: ion-card-content
          ↓FormatLayout [ngx.components.UIDynamicAttr-1725785310246]: 
            beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-right"}'
            comment: FormatLayout
            tagName: div
          ↓Form [ngx.components.UIForm-1725785310249]: 
            identifier: formResetPassword
            ↓Event [ngx.components.UIControlEvent-1725785310252]: 
              attrName: (ngSubmit)
              eventName: onSubmit
              ↓CallSequenceForgotPassword [ngx.components.UIDynamicAction-1725785310255]: 
                beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:lib_UserManager.ForgotPassword"}'
                isEnabled: false
                ↓passwordResetKey [ngx.components.UIControlVariable-1725785310258]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: source:{"filter":"Shared","project":"lib_UserManager","input":"","model":{"data":[{"priority":1582131761883,"regular":true}],"path":"?.resetKey","prefix":"","suffix":"","custom":"","useCustom":false}}
                ↓newPassword [ngx.components.UIControlVariable-1725785310261]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:formResetPassword.form.controls.newPassword.value
                ↓IfElse [ngx.components.UIDynamicIf-1725785310264]: 
                  beanData: '{"ionBean":"IfElseAction","condition":"script:out.error"}'
                  ↓EmitEvent [ngx.components.UIDynamicEmit-1725785310267]: 
                    beanData: |
                      '{
                       "ionBean": "EmitEventAction",
                       "event": "plain:lib_UserManager.MobileApplication.Application.ForgotPassword.PasswordChangedError",
                       "data": "script:stack[''CallSequenceForgotPassword''].out.error.message"
                      }'
                  ↓SetLocal [ngx.components.UIDynamicAction-1725785310270]: 
                    beanData: |
                      '{
                       "ionBean": "SetLocalAction",
                       "Property": "plain:error",
                       "Value": "script:true"
                      }'
                  ↓Else_Handler [ngx.components.UIActionElseEvent-1725785310273]: 
                    ↓EmitEvent [ngx.components.UIDynamicEmit-1725785310276]: 
                      beanData: |
                        '{
                         "ionBean": "EmitEventAction",
                         "event": "plain:lib_UserManager.MobileApplication.Application.ForgotPassword.PasswordChangedOk",
                         "data": "plain:"
                        }'
                    ↓SetLocal [ngx.components.UIDynamicAction-1725785310279]: 
                      beanData: |
                        '{
                         "ionBean": "SetLocalAction",
                         "Property": "plain:confirmAccount",
                         "Value": "script:true"
                        }'
              ↓CallSequence [ngx.components.UIDynamicAction-1725785310282]: 
                beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:lib_UserManager.SignIn"}'
                tagName: CallSequence
                ↓user [ngx.components.UIControlVariable-1725785310285]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:formResetPassword.form.controls.email.value
                ↓password [ngx.components.UIControlVariable-1725785310288]: 
                  comment: new variable
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:formResetPassword.form.controls.password.value
                ↓IfElse [ngx.components.UIDynamicIf-1725785310291]: 
                  beanData: '{"ionBean":"IfElseAction","condition":"script:parent.out.user != null"}'
                  tagName: IfElse
                  ↓CallSequence [ngx.components.UIDynamicAction-1725785310294]: 
                    beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:lib_UserManager.DeleteUser"}'
                    tagName: CallSequence
                    ↓user [ngx.components.UIControlVariable-1725785310297]: 
                      comment: new variable
                      varValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:parent.out.user
                    ↓IfElse [ngx.components.UIDynamicIf-1725785310300]: 
                      beanData: '{"ionBean":"IfElseAction","condition":"script:parent.out.deleted"}'
                      tagName: IfElse
                      ↓Toast [ngx.components.UIDynamicAction-1725785310303]: 
                        beanData: |
                          '{
                           "ionBean": "ToastAction",
                           "IonColor": "plain:danger",
                           "message": "script:c8oPage.translate.instant(''toastSuccess'')",
                           "duration": "plain",
                           "cssClass": "plain:toastWarn",
                           "showCloseButton": "plain:true",
                           "closeButtonText": "plain:ok"
                          }'
                        tagName: Toast
                      ↓Else_Handler [ngx.components.UIActionElseEvent-1725785310306]: 
                        ↓Toast [ngx.components.UIDynamicAction-1725785310309]: 
                          beanData: |
                            '{
                             "ionBean": "ToastAction",
                             "IonColor": "plain:danger",
                             "message": "script:c8oPage.translate.instant(''error_occured'')",
                             "duration": "plain",
                             "cssClass": "plain:toastWarn",
                             "showCloseButton": "plain:true",
                             "closeButtonText": "plain:ok"
                            }'
                          tagName: Toast
                  ↓Else_Handler [ngx.components.UIActionElseEvent-1725785310312]: 
                    ↓Toast [ngx.components.UIDynamicAction-1725785310315]: 
                      beanData: |
                        '{
                         "ionBean": "ToastAction",
                         "IonColor": "plain:danger",
                         "message": "script:c8oPage.translate.instant(''bad_id'')",
                         "duration": "plain",
                         "cssClass": "plain:toastWarn",
                         "showCloseButton": "plain:true",
                         "closeButtonText": "plain:ok"
                        }'
                      tagName: Toast
            ↓Directive [ngx.components.UIControlDirective-1725785310318]: 
              directiveName: If
              directiveSource: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: source:{"filter":"Local","project":"lib_UserManager","input":"","model":{"data":[{"localObject":"local"}],"path":"?.error","prefix":"","suffix":" == true else ElseBlock_1676026390778","custom":"","useCustom":false}}
              ↓Div [ngx.components.UIDynamicElement-1725785310321]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Paragraph [ngx.components.UIDynamicElement-1725785310324]: 
                  beanData: '{"ionBean":"Paragraph"}'
                  tagName: p
                  ↓Text [ngx.components.UIText-1725785310327]: 
                    i18n: true
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:An error occurred while changing your password. Your link may have expired.
                  ↓Span [ngx.components.UIDynamicElement-1725785310330]: 
                    beanData: '{"ionBean":"SpanTag"}'
                    isEnabled: false
                    tagName: span
                    ↓Text1 [ngx.components.UIText-1725785310333]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.appName
                    ↓FontStyle [ngx.components.UIFontStyle-1725785310336]: 
                      fontFamily: Open Sans
                      fontSize: 20px
                      fontStyle: normal
                      fontWeight: 700
                      ruleTargets: class1725785310330
                      styleContent: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              'font-family: "Open Sans";
                              font-size: 20px;
                              font-style: normal;
                              font-weight: 700;
                              '
                    ↓Style [ngx.components.UIStyle-1725785310339]: 
                      styleContent: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              '	color: var(--ion-color-primary);
                              '
                ↓FormatLayout [ngx.components.UIDynamicAttr-1725785310342]: 
                  beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-left"}'
                  comment: FormatLayout
                  tagName: div
                ↓Style [ngx.components.UIStyle-1725785310345]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '	padding-bottom: 50px;
                          '
            ↓Tag1 [ngx.components.UIElement-1725785310348]: 
              identifier: ElseBlock_1676026390778
              tagName: ng-template
              ↓Directive [ngx.components.UIControlDirective-1725785310351]: 
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: source:{"filter":"Local","project":"lib_UserManager","input":"","model":{"data":[{"localObject":"local"}],"path":"?.confirmAccount","prefix":"","suffix":" == true else ElseBlock_1675961194367","custom":"","useCustom":false}}
                ↓Div [ngx.components.UIDynamicElement-1725785310354]: 
                  beanData: '{"ionBean":"DivTag"}'
                  tagName: div
                  ↓Paragraph [ngx.components.UIDynamicElement-1725785310357]: 
                    beanData: '{"ionBean":"Paragraph"}'
                    tagName: p
                    ↓Text [ngx.components.UIText-1725785310360]: 
                      i18n: true
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:Your password has been changed. You can now log in to your account with your new password.
                    ↓Span [ngx.components.UIDynamicElement-1725785310363]: 
                      beanData: '{"ionBean":"SpanTag"}'
                      isEnabled: false
                      tagName: span
                      ↓Text1 [ngx.components.UIText-1725785310366]: 
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:this.appName
                      ↓FontStyle [ngx.components.UIFontStyle-1725785310369]: 
                        fontFamily: Open Sans
                        fontSize: 20px
                        fontStyle: normal
                        fontWeight: 700
                        ruleTargets: class1725785310363
                        styleContent: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                'font-family: "Open Sans";
                                font-size: 20px;
                                font-style: normal;
                                font-weight: 700;
                                '
                      ↓Style [ngx.components.UIStyle-1725785310372]: 
                        styleContent: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                            - com.twinsoft.convertigo.beans.common.FormatedContent: 
                              →: |
                                '	color: var(--ion-color-primary);
                                '
                  ↓FormatLayout [ngx.components.UIDynamicAttr-1725785310375]: 
                    beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-left"}'
                    comment: FormatLayout
                    tagName: div
                  ↓Style [ngx.components.UIStyle-1725785310378]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '	padding-bottom: 50px;
                            '
            ↓Tag [ngx.components.UIElement-1725785310381]: 
              identifier: ElseBlock_1675961194367
              tagName: ng-template
              ↓Div [ngx.components.UIDynamicElement-1725785310384]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Paragraph [ngx.components.UIDynamicElement-1725785310387]: 
                  beanData: '{"ionBean":"Paragraph"}'
                  tagName: p
                  ↓Text [ngx.components.UIText-1725785310390]: 
                    i18n: true
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: 'plain:Suppression du compte et des données associées pour l''application : '
                  ↓Span [ngx.components.UIDynamicElement-1725785310393]: 
                    beanData: '{"ionBean":"SpanTag"}'
                    tagName: span
                    ↓Text1 [ngx.components.UIText-1725785310396]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:this.appName
                    ↓FontStyle [ngx.components.UIFontStyle-1725785310399]: 
                      fontFamily: Open Sans
                      fontSize: 20px
                      fontStyle: normal
                      fontWeight: 700
                      ruleTargets: class1725785310393
                      styleContent: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              'font-family: "Open Sans";
                              font-size: 20px;
                              font-style: normal;
                              font-weight: 700;
                              '
                    ↓Style [ngx.components.UIStyle-1725785310402]: 
                      styleContent: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              '	color: var(--ion-color-primary);
                              '
                ↓Paragraph1 [ngx.components.UIDynamicElement-1725785310405]: 
                  beanData: '{"ionBean":"Paragraph"}'
                  tagName: p
                  ↓Text [ngx.components.UIText-1725785310408]: 
                    i18n: true
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:Veuillez saisir votre email et votre mot de passe, puis cliquer sur le bouton Supprimer définitivement mon compte
                ↓FormatLayout [ngx.components.UIDynamicAttr-1725785310411]: 
                  beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-left"}'
                  comment: FormatLayout
                  tagName: div
                ↓Style [ngx.components.UIStyle-1725785310414]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '	padding-bottom: 50px;
                          '
                ↓Paragraph2 [ngx.components.UIDynamicElement-1725785310417]: 
                  beanData: '{"ionBean":"Paragraph"}'
                  tagName: p
                  ↓Text [ngx.components.UIText-1725785310420]: 
                    i18n: true
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:Veuillez saisir votre email et votre mot de passe, puis cliquer sur le bouton Supprimer définitivement mon compte
                  ↓_innerHTML_ [ngx.components.UIAttribute-1725785310423]: 
                    attrName: '[innerHTML]'
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:this?.moretext
              ↓divErrors1 [ngx.components.UIDynamicElement-1725785310426]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Directive [ngx.components.UIControlDirective-1725785310429]: 
                  directiveName: If
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:f('email')
                  ↓Directive [ngx.components.UIControlDirective-1725785310432]: 
                    directiveItemName: item
                    directiveSource: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:f('email')
                    ↓Directive1 [ngx.components.UIControlDirective-1725785310435]: 
                      directiveName: If
                      directiveSource: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:item == 'required'
                      ↓Text [ngx.components.UIText-1725785310438]: 
                        i18n: true
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: plain:* This field is required
                    ↓Directive2 [ngx.components.UIControlDirective-1725785310441]: 
                      directiveName: If
                      directiveSource: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:item == 'minlength'
                      isEnabled: false
                      ↓Text1 [ngx.components.UIText-1725785310444]: 
                        i18n: true
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: plain:* Password must contain at least 8 characters
                ↓Style [ngx.components.UIStyle-1725785310447]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '	color: var(--ion-color-danger);
                          	padding-left: 16px;
                          	min-height: 21px;
                          '
                ↓FormatLayout [ngx.components.UIDynamicAttr-1725785310450]: 
                  beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-left"}'
                  selfClose: false
              ↓FormItem [ngx.components.UIDynamicElement-1725785310453]: 
                beanData: '{"ionBean":"FormItem","Lines":"plain:inset"}'
                tagName: ion-item
                ↓Label [ngx.components.UIDynamicElement-1725785310456]: 
                  beanData: '{"ionBean":"Label","Position":"plain:floating"}'
                  tagName: ion-label
                  ↓Text [ngx.components.UIText-1725785310459]: 
                    i18n: true
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:Email
                ↓TextInput [ngx.components.UIDynamicElement-1725785310462]: 
                  beanData: |
                    '{
                     "ionBean": "Input",
                     "ControlName": "plain:email",
                     "Debounce": "plain:0",
                     "Required": "plain:true",
                     "Type": "plain:email"
                    }'
                  tagName: ion-input
                ↓Icon [ngx.components.UIDynamicElement-1725785310465]: 
                  beanData: |
                    '{
                     "ionBean": "Icon",
                     "IconName": "script:this.local.showPass ? ''eye-off-outline'' : ''eye-outline''",
                     "IconSlot": "plain:end"
                    }'
                  isEnabled: false
                  tagName: ion-icon
                  ↓Event [ngx.components.UIControlEvent-1725785310468]: 
                    ↓changeTypePassword [ngx.components.UICustomAsyncAction-1725785310471]: 
                      actionValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              		try {
                              			this.local.showPass = !this.local.showPass
                              		} catch (e) {
                              		
                              		} finally {
                              			return;
                              		}
                              
                  ↓Style [ngx.components.UIStyle-1725785310474]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '    margin-top: auto;
                            '
              ↓divErrors2 [ngx.components.UIDynamicElement-1725785310477]: 
                beanData: '{"ionBean":"DivTag"}'
                tagName: div
                ↓Directive [ngx.components.UIControlDirective-1725785310480]: 
                  directiveName: If
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:f('password')
                  ↓Directive [ngx.components.UIControlDirective-1725785310483]: 
                    directiveItemName: item
                    directiveSource: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: script:f('password')
                    ↓Directive1 [ngx.components.UIControlDirective-1725785310486]: 
                      directiveName: If
                      directiveSource: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:item == 'required'
                      ↓Text [ngx.components.UIText-1725785310489]: 
                        i18n: true
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: plain:* This field is required
                    ↓Directive2 [ngx.components.UIControlDirective-1725785310492]: 
                      directiveName: If
                      directiveSource: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: script:item == 'minlength'
                      ↓Text1 [ngx.components.UIText-1725785310495]: 
                        i18n: true
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: plain:* Password must contain at least 8 characters
                ↓Style [ngx.components.UIStyle-1725785310498]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '	color: var(--ion-color-danger);
                          	padding-left: 16px;
                          	min-height: 42px;
                          	padding-top: 21px;
                          '
                ↓FormatLayout [ngx.components.UIDynamicAttr-1725785310501]: 
                  beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-left"}'
                  selfClose: false
                ↓Directive1 [ngx.components.UIControlDirective-1725785310504]: 
                  directiveName: If
                  directiveSource: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:f2()
                  ↓Text [ngx.components.UIText-1725785310507]: 
                    i18n: true
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:* Both passwords must be the same
              ↓FormItem1 [ngx.components.UIDynamicElement-1725785310510]: 
                beanData: '{"ionBean":"FormItem","Lines":"plain:inset"}'
                tagName: ion-item
                ↓Label [ngx.components.UIDynamicElement-1725785310513]: 
                  beanData: '{"ionBean":"Label","Position":"plain:floating"}'
                  tagName: ion-label
                  ↓Text [ngx.components.UIText-1725785310516]: 
                    i18n: true
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:Mot de passe
                ↓TextInput [ngx.components.UIDynamicElement-1725785310519]: 
                  beanData: |
                    '{
                     "ionBean": "Input",
                     "ControlName": "plain:password",
                     "Debounce": "plain:0",
                     "Required": "plain:true",
                     "Type": "script:local.showPass2 === true ? ''text'' : ''password''"
                    }'
                  tagName: ion-input
                ↓Icon [ngx.components.UIDynamicElement-1725785310522]: 
                  beanData: |
                    '{
                     "ionBean": "Icon",
                     "IconName": "script:this.local.showPass2 ? ''eye-off-outline'' : ''eye-outline''",
                     "IconSlot": "plain:end"
                    }'
                  tagName: ion-icon
                  ↓Event [ngx.components.UIControlEvent-1725785310525]: 
                    ↓changeTypePassword [ngx.components.UICustomAsyncAction-1725785310528]: 
                      actionValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                          - com.twinsoft.convertigo.beans.common.FormatedContent: 
                            →: |
                              		try {
                              			this.local.showPass2 = !this.local.showPass2
                              		} catch (e) {
                              		
                              		} finally {
                              			return;
                              		}
                              
                  ↓Style [ngx.components.UIStyle-1725785310531]: 
                    styleContent: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                        - com.twinsoft.convertigo.beans.common.FormatedContent: 
                          →: |
                            '    margin-top: auto;
                            '
              ↓SubmitButton [ngx.components.UIDynamicElement-1725785310534]: 
                beanData: '{"ionBean":"SubmitButton","IonColor":"plain:danger"}'
                tagName: ion-button
                ↓Text [ngx.components.UIText-1725785310537]: 
                  i18n: true
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:Supprimer définitivement mon compte et les données associées
                ↓Style [ngx.components.UIStyle-1725785310540]: 
                  styleContent: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          '/**
                           * Custom properties (sometimes referred to as CSS variables or cascading variables)
                           * are entities defined by CSS authors that contain specific values to be reused throughout a document.
                           * They are set using custom property notation, e.g.: --main-color: black;
                           * and are accessed using the var() function, e.g.: color: var(--main-color);
                           * You can find below your component''s properties you can customize within the page.
                           * If you''d like to make some customizations for whole app, please see your app Style & Theme components.
                           * For more informations see https://ionicframework.com/docs/theming.
                          **/
                          //--background	//Background of the button
                          //--background-activated	//Background of the button when pressed. Note: setting this will interfere with the Material Design ripple
                          //--background-activated-opacity	//Opacity of the button when pressed
                          //--background-focused	//Background of the button when focused with the tab key
                          //--background-focused-opacity	//Opacity of the button when focused with the tab key
                          //--background-hover	//Background of the button on hover
                          //--background-hover-opacity	//Opacity of the background on hover
                          //--border-color	//Border color of the button
                          //--border-radius	//Border radius of the button
                          //--border-style	//Border style of the button
                          //--border-width	//Border width of the button
                          //--box-shadow	//Box shadow of the button
                          //--color	//Text color of the button
                          //--color-activated	//Text color of the button when pressed
                          //--color-focused	//Text color of the button when focused with the tab key
                          //--color-hover	//Text color of the button when hover
                          //--opacity	//Opacity of the button
                          //--padding-bottom	//Bottom padding of the button
                          //--padding-end	//Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button
                          //--padding-start	//Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button
                          //--padding-top	//Top padding of the button
                          //--ripple-color	//Color of the button ripple effect
                          //--transition	//Transition of the button
                          margin-top: 42px;
                          '
    ↓GridCol2 [ngx.components.UIDynamicElement-1725785310543]: 
      beanData: '{"ionBean":"GridCol"}'
      tagName: ion-col
↓PasswordChangedError [ngx.components.UICompEvent-1725785310546]: 
  attrName: PasswordChangedError
↓PasswordChangedOk [ngx.components.UICompEvent-1725785310549]: 
  attrName: PasswordChangedOk
↓resetKey [ngx.components.UICompVariable-1725785310552]: 
↓SharedComponent_Event [ngx.components.UISharedComponentEvent-1725785310555]: 
  ↓CustomAsyncAction [ngx.components.UICustomAsyncAction-1725785310558]: 
    actionValue: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
        - com.twinsoft.convertigo.beans.common.FormatedContent: 
          →: |
            '		try {
            			debugger;
            			page.c8o.log.debug(''[MB] ''+ props.actionFunction +'': ''+ props.actionName);
            		} catch (e) {
            		
            		} finally {
            			return;
            		}
            '
↓appName [ngx.components.UICompVariable-1725785310561]: 
↓imgUrl [ngx.components.UICompVariable-1725785310564]: 
↓moretext [ngx.components.UICompVariable-1725785310567]: 